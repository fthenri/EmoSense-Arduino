import serial
import time
import os
import tkinter as tk
from tkinter import Label
from PIL import Image, ImageTk
import threading

# Configuração da porta serial
ser = serial.Serial('COM6', 9600, timeout=1)

# Variáveis globais para armazenar a galeria e a imagem selecionadas
selected_gallery = None
selected_image = None

# Caminhos para as imagens
image_paths = {
    'btn1': [r"C:\path\to\negative1.jpg", r"C:\path\to\negative2.jpg", r"C:\path\to\negative3.jpg", r"C:\path\to\negative4.jpg"],
    'btn2': [r"C:\path\to\positive1.jpg", r"C:\path\to\positive2.jpg", r"C:\path\to\positive3.jpg", r"C:\path\to\positive4.jpg"],
    'btn3': [r"C:\path\to\desire1.jpg", r"C:\path\to\desire2.jpg", r"C:\path\to\desire3.jpg", r"C:\path\to\desire4.jpg"],
    'btn4': [r"C:\path\to\need1.jpg", r"C:\path\to\need2.jpg", r"C:\path\to\need3.jpg", r"C:\path\to\need4.jpg"]
}

# Inicializa o mixer de som
pygame.mixer.init()

# Função para mostrar múltiplas imagens
def show_images(image_paths):
    for widget in panel.winfo_children():
        widget.destroy()
    
    images = [ImageTk.PhotoImage(Image.open(path).resize((250, 250), Image.LANCZOS)) for path in image_paths]
    for i, img in enumerate(images):
        label = Label(panel, image=img)
        label.image = img
        label.grid(row=0, column=i)
        label.bind("<Button-1>", lambda e, path=image_paths[i]: select_image(path))

# Função para selecionar imagem
def select_image(image_path):
    global selected_image
    selected_image = image_path
    print(f"Imagem selecionada: {image_path}")
    print("Pressione o mesmo botão novamente para confirmar a seleção.")

# Função para tocar som
def play_sound(sound_path):
    pygame.mixer.music.load(sound_path)
    pygame.mixer.music.play()

# Função para ler os dados da serial e atualizar a interface
def read_serial():
    global selected_gallery, selected_image
    while True:
        if ser.in_waiting > 0:
            data = ser.readline().decode('utf-8').strip()
            if data:
                print(f"Received: {data}")
                if data in image_paths:
                    selected_gallery = data
                    print(f"Galeria selecionada: {selected_gallery}")
                elif data.startswith("img"):
                    if selected_gallery and data in image_paths[selected_gallery]:
                        selected_image = data
                        print(f"Imagem selecionada: {selected_image}")
                        play_sound(r"C:\path\to\confirmation_sound.mp3")  # Efeito sonoro de confirmação
                    else:
                        print("Selecione primeiro uma galeria e, em seguida, uma imagem.")

# Inicializa a interface gráfica
root = tk.Tk()
root.title("Interface Serial com Tkinter")

# Configura o painel para mostrar imagens
panel = Label(root)
panel.pack(side="bottom", fill="both", expand="yes")

if __name__ == "__main__":
    print("Verificando conexão com o Arduino...")
    time.sleep(2)  # Tempo para garantir que a conexão serial esteja estável
    
    if verify_arduino_connection():
        # Inicia a leitura dos dados da serial em um thread separado para não bloquear a interface
        thread = threading.Thread(target=read_serial)
        thread.daemon = True
        thread.start()
        
        # Inicia o loop principal da interface Tkinter
        root.mainloop()
    else:
        print("Encerrando o programa devido à falha na conexão com o Arduino.")
